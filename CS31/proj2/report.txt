Project 2:

As someone who has never used a language where variable types need to be declared, I found the whole process of deciding what type a certain variable should be quite challenging. For example, I knew double and float could both be used to store decimal numbers, but I wasn't sure which one to use. However, after some research, I learned that double is more precise than float. Even though both variable types are valid to use for the scope of this project, I ended up using double. Another challenge I had was learning to deal with invalid inputs and clearing the buffer. There were many moments where I believed I had finished the project, only for one of the testcases to fail because I didn't clear the buffer. I struggled specifically with the invalid inputs into a char, but after reviewing the lecture slides, I got into the habit of clearing the buffer and ignoring a large number of lines. 

The biggest hurdle I faced this project was a bug with the boolean flags I set to mark if the user had inputted an inproper value. At first, I did not initialize any of the boolean flags, as I didn't yet have the habit of initializing any of my variables. However, near the end stage of finishing up this project, I kept on running into a bug where even if the coffee type was valid, the program would still mark it as incorrect and output an error message at the end. After going crazy for a good 30 minutes, I decided to manually set each flag to false, and voila! The bug was fixed, and I realized the importance of initializing variables.

Something else that confused me for a while was why my cin >> first_name; was not working for multiple word inputs. I had always thoguht that even if cin was used, users could enter multiple words. I thought everything after the space would be ignored and only the first word would be saved, which does occur. After doing some research, I found that I should be using getline(cin, first_name) instead, and this would allow the function to continue as normal.  

The testcases I used: 

Test case 1: I used this testcase because it has all valid inputs, and the output should match the example given in the project 
Input: 
Customer's first name: Allan
Number of cups: 3
Type of coffee (r=regular, d=decaf): r
Any extra items? (y/n): y
Day of the week: Wednesday

Output:
The total charge for Maria is $11.86


Test case 2: I used this testcase to test if the program could handle a multiple word input for name, and to see if it could correctly set the name_flag to true.
Input: 
Customer's first name: allan zhang
Number of cups: 3
Type of coffee (r=regular, d=decaf): r
Any extra items? (y/n): y
Day of the week: Wednesday

Output:
The first name must start with an uppercase letter.


Test case 3: I used this testcase for the same reasons as above, but I also wanted to test if the program could handle an invalid input for the number of cups. Also with 2 errors, I needed to test if the program would only output the first error message.
Input: 
Customer's first name: allan zhang
Number of cups: x
Type of coffee (r=regular, d=decaf): r
Any extra items? (y/n): y
Day of the week: Wednesday

Output:
The first name must start with an uppercase letter.


Test case 4: I used this edge case to see what happens if the total amount comes to a decimal that should be rounded. In this case, the total output is $9.3075, which should be rounded to $9.31. 
Input: 
Customer's first name: Allan
Number of cups: 2
Type of coffee (r=regular, d=decaf): d
Any extra items? (y/n): y
Day of the week: Wednesday

Output:
The total charge for Allan is $9.31


Test case 5: I used this testcase to test if the program could still properly display the first error message if all of the flags are raised.  
Input: 
Customer's first name: allan zhang
Number of cups: l
Type of coffee (r=regular, d=decaf): x
Any extra items? (y/n): x
Day of the week: x

Output:
The first name must start with an uppercase letter.


Test case 6: I used this testcase to test if the program could handle have a number inputted for every input 
Input: 
Customer's first name: 4
Number of cups: 4
Type of coffee (r=regular, d=decaf): 4
Any extra items? (y/n): 4
Day of the week: 4

Output:
The first name must start with an uppercase letter.


Test case 7: I used this testcase to see if the program could handle negative inputs of the number of cups
Input: 
Customer's first name: Allan zhang
Number of cups: -2
Type of coffee (r=regular, d=decaf): r
Any extra items? (y/n): n
Day of the week: Monday

Output:
The number of cups must be a positive.


Test case 8: I used this testcase to see if the program correctly applies the decaf price to the total charge. 
Input: 
Customer's first name: Allan zhang
Number of cups: 2
Type of coffee (r=regular, d=decaf): d
Any extra items? (y/n): n
Day of the week: Monday

Output:
The total charge for Allan is $9.00.


Test case 9: I used this testcase to see if the program correctly applies the extra item price to the total charge. 
Input: 
Customer's first name: Allan zhang
Number of cups: 2
Type of coffee (r=regular, d=decaf): d
Any extra items? (y/n): y
Day of the week: Monday

Output:
The total charge for Allan is $10.95.


Test case 10: I used this testcase to test if the program would properly raise the error for the extra items input 
Input: 
Customer's first name: Allan zhang
Number of cups: 2
Type of coffee (r=regular, d=decaf): r
Any extra items? (y/n): x
Day of the week: Monday

Output:
You must enter y or n.
